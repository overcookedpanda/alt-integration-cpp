name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  linux:
    runs-on: ubuntu-18.04
    container: veriblock/alt-integration-cpp-dev
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCLANG_TIDY=ON", "-DASAN=ON", "-DCMAKE_BUILD_TYPE=Release"]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cd build && ctest


  coverage:
    runs-on: ubuntu-18.04
    container: veriblock/alt-integration-cpp-dev
    env:
      CC: gcc
      CXX: g++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }} -DCOVERAGE=ON -DWITH_ROCKSDB=ON
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cmake --build build --target ctest_coverage
      - name: collect coverage
        shell: bash
        run: bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }}

  windows:
    runs-on: windows-latest
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      VCPKG_DEFAULT_TRIPLET: x64-windows
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
          fetch-depth: 1

#      - name: install vcpkg
#        run: vcpkg integrate install
#
#      - name: cache vcpkg installed
#        uses: actions/cache@v1
#        with:
#          path: C:/vcpkg/installed
#          key: ${{ runner.os }}-install-${{ hashFiles('**/*.cmake') }}-${{ hashFiles('CMakeLists.txt') }}

#      - name: install zlib
#        run: vcpkg install zlib:x64-windows-static
#      - name: install dependencies
#        run: vcpkg install rocksdb:x64-windows-static

      - name: cmake
        run: cmake . -Bbuild -A x64 -DWITH_ROCKSDB=OFF -DSHARED=OFF -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE
      - name: build
        run: cmake --build build
      - name: test
        run: cmake --build build --target RUN_TESTS

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCMAKE_BUILD_TYPE=Release"]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cd build && ctest

  x86_64-apple-darwin16:
    runs-on: ubuntu-18.04
    container: veriblock/alt-integration-cpp-dev
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DCMAKE_C_COMPILER_TARGET=x86_64-apple-darwin16 -DCMAKE_CXX_COMPILER_TARGET=x86_64-apple-darwin16 -DCMAKE_OSX_SYSROOT=SDKs/MacOSX10.14.sdk"]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: clone native_cctools
        uses: actions/checkout@master
        with:
          repository: tpoechtrager/cctools-port
          ref: 3764b223c011574971ee3ae09ce968ba5dc2f00f
          path: native_cctools
      - name: clone apple-libtapi
        uses: actions/checkout@master
        with:
          repository: tpoechtrager/apple-libtapi
          ref: 3efb201881e7a76a21e0554906cf306432539cef
          path: apple-libtapi
      - name: install cctools & libtapi
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/cctools
          cd ${GITHUB_WORKSPACE}/apple-libtapi
          INSTALLPREFIX=${GITHUB_WORKSPACE}/cctools ./build.sh
          ./install.sh
          cd native_cctools/cctools
          ./configure \
              --prefix=/${GITHUB_WORKSPACE}/cctools \
              --with-libtapi=${GITHUB_WORKSPACE}/cctools \
              --target=x86_64-apple-darwin16
          make
          make install
      - name: download and extract macos sdk
        run: |
          wget -P sdk-sources https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          mkdir -p SDKs
          tar -xf sdk-sources/MacOSX10.14.sdk.tar.xz -C SDKs
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cd build && ctest